generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  firstName        String?
  lastName         String?
  username         String
  email            String    @unique
  password         String
  shortDescription String?
  description      String?
  emailVerified    DateTime?
  image            String?
  role             Role      @default(USER)
  comments         Comment[]
  posts            Post[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String
  image      String?
  slug       String?
  content    String
  published  Boolean   @default(false)
  authorId   String
  categoryId Int
  comments   Comment[] @relation("PostComments")
  author     User      @relation(fields: [authorId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  tags       Tag[]     @relation("PostTags")

  @@map("posts")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]

  @@map("categories")
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String
  postId Int
  post   Post   @relation("PostTags", fields: [postId], references: [id], onDelete: Cascade)

  @@map("tags")
}

model Comment {
  id       Int    @id @default(autoincrement())
  text     String
  postId   Int
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  post     Post   @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum Role {
  USER
  ADMIN
}
